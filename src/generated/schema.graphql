schema {
  query: QueryRoot
  mutation: MutationRoot
}

type AuthPayload {
  token: String!
  user: User!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type MessageResponse {
  message: String!
}

type MutationRoot {
  login(input: LoginInput!): AuthPayload!
  register(input: RegisterInput!): User!
  verifyEmail(token: String!): MessageResponse!
}

type QueryRoot {
  health: String!
  me: User!
}

input RegisterInput {
  email: String!
  firstName: String
  lastName: String
  password: String!
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique Identifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

type User {
  createdAt: DateTime!
  email: String!
  firstName: String
  id: UUID!
  isEmailVerified: Boolean!
  lastName: String
  updatedAt: DateTime!
}