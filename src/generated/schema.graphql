schema {
  query: QueryRoot
  mutation: MutationRoot
}

input AcceptInvitationInput {
  firstName: String
  invitationToken: String!
  lastName: String
  password: String!
}

type Activity {
  actionType: String!
  actor: User
  actorId: UUID!
  changesJson: String
  createdAt: DateTime!
  description: String
  entityId: UUID!
  entityType: String!
  id: UUID!
  metadataJson: String
}

input AddProjectMemberInput {
  projectId: UUID!
  role: String!
  userId: UUID!
}

input AdminResetUserPasswordInput {
  userId: UUID!
}

input AssignPermissionToRoleInput {
  permissionId: UUID!
  roleId: UUID!
}

input AssignRoleInput {
  roleId: UUID!
  userId: UUID!
}

input AssignTaskInput {
  assigneeId: UUID
  taskId: UUID!
}

type AuthPayload {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input CreatePermissionInput {
  action: String!
  description: String
  resourceId: UUID!
}

input CreateProjectInput {
  description: String
  name: String!
}

input CreateResourceInput {
  description: String
  name: String!
}

input CreateRoleInput {
  description: String
  level: Int!
  name: String!
}

input CreateTaskInput {
  assigneeId: UUID
  description: String
  dueDate: DateTime
  name: String!
  priority: TaskPriority
  projectId: UUID!
  recurrenceDay: Int
  recurrenceType: RecurrenceType
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

input GrantUserPermissionInput {
  permissionId: UUID!
  userId: UUID!
}

type Invitation {
  createdAt: DateTime!
  email: String!
  expiresAt: DateTime!
  id: UUID!
  inviterUserId: UUID!
  isUsed: Boolean!
  role: Role
  usedAt: DateTime
}

input InviteUserInput {
  email: String!
}

input InviteUserWithRoleInput {
  email: String!
  roleId: UUID
}

input LoginInput {
  email: String!
  password: String!
}

type MessageResponse {
  message: String!
}

type MutationRoot {
  acceptInvitation(input: AcceptInvitationInput!): AuthPayload!
  addProjectMember(input: AddProjectMemberInput!): MessageResponse!
  adminResetUserPassword(input: AdminResetUserPasswordInput!): MessageResponse!
  assignPermissionToRole(input: AssignPermissionToRoleInput!): MessageResponse!
  assignRole(input: AssignRoleInput!): User!
  assignTask(input: AssignTaskInput!): Task!
  changePassword(input: ChangePasswordInput!): MessageResponse!
  createPermission(input: CreatePermissionInput!): Permission!
  createProject(input: CreateProjectInput!): Project!
  createResource(input: CreateResourceInput!): Resource!
  createRole(input: CreateRoleInput!): Role!
  createTask(input: CreateTaskInput!): Task!
  deletePermission(permissionId: UUID!): MessageResponse!
  deleteProject(projectId: UUID!): MessageResponse!
  deleteResource(resourceId: UUID!): MessageResponse!
  deleteRole(roleId: UUID!): MessageResponse!
  deleteTask(taskId: UUID!): MessageResponse!
  grantUserPermission(input: GrantUserPermissionInput!): MessageResponse!
  inviteUser(input: InviteUserInput!): Invitation!
  inviteUserWithRole(input: InviteUserWithRoleInput!): Invitation!
  login(input: LoginInput!): AuthPayload!
  logout: MessageResponse!
  refreshToken(input: RefreshTokenInput!): AuthPayload!
  register(input: RegisterInput!): User!
  removePermissionFromRole(input: RemovePermissionFromRoleInput!): MessageResponse!
  removeProjectMember(input: RemoveProjectMemberInput!): MessageResponse!
  removeUserRole(userId: UUID!): User!
  requestPasswordReset(input: RequestPasswordResetInput!): MessageResponse!
  resetPassword(input: ResetPasswordInput!): MessageResponse!
  revokeUserPermission(input: RevokeUserPermissionInput!): MessageResponse!
  updateMemberRole(input: UpdateMemberRoleInput!): MessageResponse!
  updatePermission(input: UpdatePermissionInput!): Permission!
  updateProject(input: UpdateProjectInput!): Project!
  updateResource(input: UpdateResourceInput!): Resource!
  updateRole(input: UpdateRoleInput!): Role!
  updateTask(input: UpdateTaskInput!): Task!
  verifyEmail(token: String!): MessageResponse!
}

type Permission {
  action: String!
  createdAt: DateTime!
  description: String
  id: UUID!
  isActive: Boolean!
  resource: Resource
  resourceId: UUID!
  resourceName: String!
  updatedAt: DateTime!
}

type Project {
  createdAt: DateTime!
  description: String
  id: UUID!
  isActive: Boolean!
  members: [ProjectMember!]!
  name: String!
  owner: User
  ownerId: UUID!
  tasks(assigneeId: UUID, limit: Int, offset: Int, status: TaskStatus): [Task!]!
  updatedAt: DateTime!
}

type ProjectMember {
  id: UUID!
  joinedAt: DateTime!
  projectId: UUID!
  role: String!
  user: User!
  userId: UUID!
}

type QueryRoot {
  allPermissions(resourceId: UUID): [Permission!]!
  allResources: [Resource!]!
  allRoles: [Role!]!
  allRolesWithPermissions: [RoleWithPermissions!]!
  allUsers: [UserWithRole!]!
  health: String!
  me: User!
  myAssignedTasks(limit: Int, offset: Int, status: TaskStatus): [Task!]!
  myInvitations: [Invitation!]!
  myProjects(limit: Int, offset: Int): [Project!]!
  permissionById(permissionId: UUID!): Permission
  project(projectId: UUID!): Project
  projectTaskStats(projectId: UUID!): TaskStats!
  projectTasks(assigneeId: UUID, limit: Int, offset: Int, projectId: UUID!, status: TaskStatus): [Task!]!
  resourceById(resourceId: UUID!): Resource
  roleById(roleId: UUID!): RoleWithPermissions
  rolePermissions(roleId: UUID!): [Permission!]!
  task(taskId: UUID!): Task
  userById(userId: UUID!): UserWithRole!
  userDirectPermissions(userId: UUID!): [Permission!]!
  userPermissions(userId: UUID!): [String!]!
  usersByRole(roleName: String!): [UserWithRole!]!
}

enum RecurrenceType {
  DAILY
  MONTHLY
  NONE
  WEEKDAYS
  WEEKLY
}

input RefreshTokenInput {
  refreshToken: String!
}

input RegisterInput {
  email: String!
  firstName: String
  lastName: String
  password: String!
}

input RemovePermissionFromRoleInput {
  permissionId: UUID!
  roleId: UUID!
}

input RemoveProjectMemberInput {
  projectId: UUID!
  userId: UUID!
}

input RequestPasswordResetInput {
  email: String!
}

input ResetPasswordInput {
  newPassword: String!
  token: String!
}

type Resource {
  createdAt: DateTime!
  description: String
  id: UUID!
  isActive: Boolean!
  name: String!
  updatedAt: DateTime!
}

input RevokeUserPermissionInput {
  permissionId: UUID!
  userId: UUID!
}

type Role {
  createdAt: DateTime!
  description: String
  id: UUID!
  isActive: Boolean!
  level: Int!
  name: String!
  updatedAt: DateTime!
}

type RoleWithPermissions {
  createdAt: DateTime!
  description: String
  id: UUID!
  isActive: Boolean!
  level: Int!
  name: String!
  permissions: [Permission!]!
  updatedAt: DateTime!
  userCount: Int!
}

type Task {
  activities(limit: Int, offset: Int): [Activity!]!
  activityCount: Int!
  assignee: User
  assigneeId: UUID
  createdAt: DateTime!
  creator: User
  creatorId: UUID!
  description: String
  dueDate: DateTime
  id: UUID!
  isRecurring: Boolean!
  name: String!
  nextDueDate: DateTime
  parentTask: Task
  parentTaskId: UUID
  priority: TaskPriority!
  project: Project
  projectId: UUID!
  recurrenceDay: Int
  recurrenceType: RecurrenceType!
  recurringInstances(limit: Int): [Task!]!
  status: TaskStatus!
  updatedAt: DateTime!
}

enum TaskPriority {
  HIGH
  LOW
  MEDIUM
  URGENT
}

type TaskStats {
  cancelled: Int!
  completed: Int!
  inProgress: Int!
  overdue: Int!
  todo: Int!
  total: Int!
}

enum TaskStatus {
  CANCELLED
  COMPLETED
  IN_PROGRESS
  TODO
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique Identifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

input UpdateMemberRoleInput {
  projectId: UUID!
  role: String!
  userId: UUID!
}

input UpdatePermissionInput {
  action: String
  description: String
  isActive: Boolean
  permissionId: UUID!
  resourceId: UUID
}

input UpdateProjectInput {
  description: String
  name: String
  projectId: UUID!
}

input UpdateResourceInput {
  description: String
  isActive: Boolean
  name: String
  resourceId: UUID!
}

input UpdateRoleInput {
  description: String
  isActive: Boolean
  level: Int
  name: String
  roleId: UUID!
}

input UpdateTaskInput {
  description: String
  dueDate: DateTime
  name: String
  priority: TaskPriority
  recurrenceDay: Int
  recurrenceType: RecurrenceType
  status: TaskStatus
  taskId: UUID!
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String
  id: UUID!
  isEmailVerified: Boolean!
  lastName: String
  permissions: [String!]!
  role: Role
  updatedAt: DateTime!
}

type UserWithRole {
  createdAt: DateTime!
  email: String!
  firstName: String
  id: UUID!
  isEmailVerified: Boolean!
  lastName: String
  permissions: [String!]!
  role: Role
  updatedAt: DateTime!
}